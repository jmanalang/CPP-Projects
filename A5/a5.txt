//Problem 1 Interative Form
int iterative_count (const vector<int>& vec, int k)
	int key_counter = 0;
	for(size_t i = 0; i < vec.size(); i++){
		if (k == vec[i]){
			key_counter++;
		}
	}
	return counter;
}

//Problem 1 Recursive Form

int recursive_count(const vector<int>& vec, int key, size_t start){
	if(start >= vec.size()){
		return 0;
	}
	else {
		return((key == vec[start]? 1:0) + recursive_count(vec,key,start+1);
	}
}



//Problem 2 Iterative
int iterative_kth_element(vector<int>& vec, size_t k){
	int small;
	size_t pos = 0;
	for(size_t a = 1; a<=k; a++){
		small = vec[0];
		for (size_t i = 0: i < vec.size(); i++){
			if(small >= vec[i]){
				small = vec[i];
				pos = i;
			}
	
		}
	vec.erase(vec.begin() + position);
	}
	return small;
}

//Problem 2 Recursive
int recursive_kth_element(vector<int>& vec, size_t k){
	size_t i, pos;
	int small;
	if(k==0){
		return small;
	}
	else if(k>0){
		if(i < vec.size(){
			if (small >= vec[i]){
				small = vec[i];
				pos = i;
				i++;	
			}
			else{i++;}
		}
	return recursive_kth_element(vec,k);
	}
	else{
		vec.erase(vec.begin()+pos);
		small = vec[0];
		return recursive_kth_element (vec, k-1);
	}
}


//Problem 3 Combination of Coins

int change_combo (int dollar){
	int total_cents = dollar*100;
	int combo = 0;
	for (int q <= total_cents/25; q++){
		int total_less_quarters = total_cents - q*25;
		for (int d = 0; d<=total_less_quarters/10; d++){
			int total_less_quarters_dimes = total_less_quarters -
d*10;
				for (int n = 0;n<=total_less_quarters_dimes/5; n++){
					int p = total_less_quarters_dimes -n*5;
					combo++;
				}
		}
	
	}
return combo;
}
